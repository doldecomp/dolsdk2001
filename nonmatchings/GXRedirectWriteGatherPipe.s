/* 000013C0 000013F4  7C 08 02 A6 */	mflr r0
/* 000013C4 000013F8  90 01 00 04 */	stw r0, 0x4(r1)
/* 000013C8 000013FC  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 000013CC 00001400  BF 81 00 10 */	stmw r28, 0x10(r1)
/* 000013D0 00001404  3B A3 00 00 */	addi r29, r3, 0x0
/* 000013D4 00001408  3C 60 00 00 */	lis r3, __data_0@ha
/* 000013D8 0000140C  3B E3 00 00 */	addi r31, r3, __data_0@l
/* 000013DC 00001410  3B C0 00 00 */	li r30, 0x0
/* 000013E0 00001414  48 00 00 01 */	bl OSDisableInterrupts
/* 000013E4 00001418  7C 7C 1B 78 */	mr r28, r3
/* 000013E8 0000141C  88 00 00 00 */	lbz r0, __GXinBegin
/* 000013EC 00001420  28 00 00 00 */	cmplwi r0, 0x0
/* 000013F0 00001424  41 82 00 18 */	beq L_00001408
/* 000013F4 00001428  38 7F 00 14 */	addi r3, r31, 0x14
#if DOLPHIN_REVISION >= 45
/* 000013F8 0000142C  38 80 05 A6 */	li r4, 0x5b8
/* 000013FC 00001430  38 BF 04 F0 */	addi r5, r31, 0x48c
#else
/* 000013F8 0000142C  38 80 05 A6 */	li r4, 0x5a6
/* 000013FC 00001430  38 BF 04 F0 */	addi r5, r31, 0x4f0
#endif
/* 00001400 00001434  4C C6 31 82 */	crclr 4*cr1+eq
/* 00001404 00001438  48 00 00 01 */	bl OSPanic
L_00001408:
/* 00001408 0000143C  57 A0 06 FF */	clrlwi. r0, r29, 27
/* 0000140C 00001440  41 82 00 18 */	beq L_00001424
/* 00001410 00001444  38 7F 00 14 */	addi r3, r31, 0x14
#if DOLPHIN_REVISION >= 45
/* 00001414 00001448  38 80 05 A7 */	li r4, 0x5b9
/* 00001418 0000144C  38 BF 05 34 */	addi r5, r31, 0x4d0
#else
/* 00001414 00001448  38 80 05 A7 */	li r4, 0x5a7
/* 00001418 0000144C  38 BF 05 34 */	addi r5, r31, 0x534
#endif
/* 0000141C 00001450  4C C6 31 82 */	crclr 4*cr1+eq
/* 00001420 00001454  48 00 00 01 */	bl OSPanic
L_00001424:
/* 00001424 00001458  80 00 00 00 */	lwz r0, IsWGPipeRedirected
/* 00001428 0000145C  2C 00 00 00 */	cmpwi r0, 0x0
/* 0000142C 00001460  41 82 00 18 */	beq L_00001444
/* 00001430 00001464  38 7F 00 14 */	addi r3, r31, 0x14
#if DOLPHIN_REVISION >= 45
/* 00001434 00001468  38 80 05 A9 */	li r4, 0x5bb
/* 00001438 0000146C  38 BF 05 5C */	addi r5, r31, 0x4f8
#else
/* 00001434 00001468  38 80 05 A9 */	li r4, 0x5a9
/* 00001438 0000146C  38 BF 05 5C */	addi r5, r31, 0x55c
#endif
/* 0000143C 00001470  4C C6 31 82 */	crclr 4*cr1+eq
/* 00001440 00001474  48 00 00 01 */	bl OSPanic
L_00001444:
/* 00001444 00001478  38 00 00 01 */	li r0, 0x1
/* 00001448 0000147C  90 00 00 00 */	stw r0, IsWGPipeRedirected
/* 0000144C 00001480  48 00 00 01 */	bl GXFlush
L_00001450:
/* 00001450 00001484  48 00 00 01 */	bl PPCMfwpar
/* 00001454 00001488  54 60 07 FF */	clrlwi. r0, r3, 31
/* 00001458 0000148C  40 82 FF F8 */	bne L_00001450
/* 0000145C 00001490  3C 60 CC 01 */	lis r3, 0xcc01
/* 00001460 00001494  38 63 80 00 */	addi r3, r3, -0x8000
/* 00001464 00001498  48 00 00 01 */	bl OSUncachedToPhysical
/* 00001468 0000149C  48 00 00 01 */	bl PPCMtwpar
/* 0000146C 000014A0  88 00 00 00 */	lbz r0, CPGPLinked
/* 00001470 000014A4  28 00 00 00 */	cmplwi r0, 0x0
/* 00001474 000014A8  41 82 00 18 */	beq L_0000148C
/* 00001478 000014AC  38 60 00 00 */	li r3, 0x0
/* 0000147C 000014B0  48 00 00 01 */	bl __GXFifoLink
/* 00001480 000014B4  38 60 00 00 */	li r3, 0x0
/* 00001484 000014B8  38 80 00 00 */	li r4, 0x0
/* 00001488 000014BC  48 00 00 01 */	bl __GXWriteFifoIntEnable
L_0000148C:
/* 0000148C 000014C0  80 60 00 00 */	lwz r3, __piReg
/* 00001490 000014C4  80 03 00 14 */	lwz r0, 0x14(r3)
/* 00001494 000014C8  54 03 01 88 */	rlwinm r3, r0, 0, 6, 4
/* 00001498 000014CC  48 00 00 01 */	bl OSPhysicalToCached
/* 0000149C 000014D0  80 80 00 00 */	lwz r4, CPUFifo
/* 000014A0 000014D4  90 64 00 18 */	stw r3, 0x18(r4)
/* 000014A4 000014D8  38 00 00 00 */	li r0, 0x0
/* 000014A8 000014DC  80 60 00 00 */	lwz r3, __piReg
/* 000014AC 000014E0  90 03 00 0C */	stw r0, 0xc(r3)
/* 000014B0 000014E4  3C 00 04 00 */	lis r0, 0x400
/* 000014B4 000014E8  80 60 00 00 */	lwz r3, __piReg
/* 000014B8 000014EC  90 03 00 10 */	stw r0, 0x10(r3)
/* 000014BC 000014F0  57 A0 D9 D5 */	rlwinm. r0, r29, 27, 7, 10
/* 000014C0 000014F4  41 82 00 18 */	beq L_000014D8
/* 000014C4 000014F8  38 7F 00 14 */	addi r3, r31, 0x14
#if DOLPHIN_REVISION >= 45
/* 000014C8 000014FC  38 80 05 C8 */	li r4, 0x5da
#else
/* 000014C8 000014FC  38 80 05 C8 */	li r4, 0x5c8
#endif
/* 000014CC 00001500  38 BF 03 98 */	addi r5, r31, 0x398
/* 000014D0 00001504  4C C6 31 82 */	crclr 4*cr1+eq
/* 000014D4 00001508  48 00 00 01 */	bl OSPanic
L_000014D8:
/* 000014D8 0000150C  57 C4 06 CA */	rlwinm r4, r30, 0, 27, 5
/* 000014DC 00001510  57 A0 00 B4 */	rlwinm r0, r29, 0, 2, 26
/* 000014E0 00001514  7C 9E 03 78 */	or r30, r4, r0
/* 000014E4 00001518  57 DE 01 88 */	rlwinm r30, r30, 0, 6, 4
/* 000014E8 0000151C  80 60 00 00 */	lwz r3, __piReg
/* 000014EC 00001520  93 C3 00 14 */	stw r30, 0x14(r3)
/* 000014F0 00001524  7C 00 04 AC */	sync
/* 000014F4 00001528  7F 83 E3 78 */	mr r3, r28
/* 000014F8 0000152C  48 00 00 01 */	bl OSRestoreInterrupts
/* 000014FC 00001530  3C 60 CC 01 */	lis r3, 0xcc01
/* 00001500 00001534  38 63 80 00 */	addi r3, r3, -0x8000
/* 00001504 00001538  80 01 00 24 */	lwz r0, 0x24(r1)
/* 00001508 0000153C  BB 81 00 10 */	lmw r28, 0x10(r1)
/* 0000150C 00001540  38 21 00 20 */	addi r1, r1, 0x20
/* 00001510 00001544  7C 08 03 A6 */	mtlr r0
/* 00001514 00001548  4E 80 00 20 */	blr
